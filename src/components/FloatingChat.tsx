import React, { useState, useEffect, useRef } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { 
  MessageCircle, 
  Send, 
  Bot, 
  User, 
  X, 
  Minimize2 
} from 'lucide-react';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Input } from '@/components/ui/input';
import { Avatar, AvatarFallback } from '@/components/ui/avatar';

interface ChatMessage {
  id: string;
  type: 'user' | 'bot';
  message: string;
  timestamp: Date;
  context?: string; // Add context to track conversation flow
}

interface ChatContext {
  topic?: string;
  userIntent?: string;
  lastKeywords?: string[];
  conversationStep?: number;
}

const FloatingChat: React.FC = () => {
  const [isOpen, setIsOpen] = useState(false);
  const [isMinimized, setIsMinimized] = useState(false);
  const [chatMessages, setChatMessages] = useState<ChatMessage[]>([
    {
      id: '1',
      type: 'bot',
      message: 'Xin ch√†o! T√¥i l√† tr·ª£ l√Ω ·∫£o c·ªßa EV Rental. T√¥i c√≥ th·ªÉ gi√∫p g√¨ cho b·∫°n?',
      timestamp: new Date(),
      context: 'greeting'
    },
  ]);
  const [chatInput, setChatInput] = useState('');
  const [chatContext, setChatContext] = useState<ChatContext>({
    topic: '',
    userIntent: '',
    lastKeywords: [],
    conversationStep: 0
  });
  const [isTyping, setIsTyping] = useState(false);
  const messagesEndRef = useRef<HTMLDivElement>(null);

  // Auto scroll to bottom when new messages arrive
  useEffect(() => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  }, [chatMessages, isTyping]);

  // Function to extract keywords and intent from user message
  const analyzeUserMessage = (message: string) => {
    const lowerMessage = message.toLowerCase();
    const keywords = lowerMessage.split(' ').filter(word => word.length > 2);
    
    let intent = 'general';
    let topic = '';
    
    if (lowerMessage.includes('thu√™') || lowerMessage.includes('booking') || lowerMessage.includes('ƒë·∫∑t')) {
      intent = 'booking';
      topic = 'rental';
    } else if (lowerMessage.includes('gi√°') || lowerMessage.includes('ph√≠') || lowerMessage.includes('cost')) {
      intent = 'pricing';
      topic = 'pricing';
    } else if (lowerMessage.includes('ƒë·ªãa ch·ªâ') || lowerMessage.includes('location') || lowerMessage.includes('n∆°i')) {
      intent = 'location';
      topic = 'location';
    } else if (lowerMessage.includes('tr·∫£ xe') || lowerMessage.includes('return')) {
      intent = 'return';
      topic = 'return';
    } else if (lowerMessage.includes('h·ªó tr·ª£') || lowerMessage.includes('help') || lowerMessage.includes('support')) {
      intent = 'support';
      topic = 'support';
    } else if (lowerMessage.includes('pin') || lowerMessage.includes('battery') || lowerMessage.includes('s·∫°c')) {
      intent = 'battery';
      topic = 'battery';
    }
    
    return { keywords, intent, topic };
  };

  // Function to generate contextual bot response
  const generateBotResponse = (userMessage: string, chatHistory: ChatMessage[], currentContext: ChatContext): { message: string; newContext: ChatContext } => {
    const analysis = analyzeUserMessage(userMessage);
    const lowerMessage = userMessage.toLowerCase();
    
    // Update context based on current analysis
    const newContext: ChatContext = {
      ...currentContext,
      topic: analysis.topic || currentContext.topic,
      userIntent: analysis.intent,
      lastKeywords: analysis.keywords,
      conversationStep: (currentContext.conversationStep || 0) + 1
    };
    
    // Greeting responses
    if (lowerMessage.includes('xin ch√†o') || lowerMessage.includes('hello') || lowerMessage.includes('ch√†o')) {
      return {
        message: 'Xin ch√†o! R·∫•t vui ƒë∆∞·ª£c g·∫∑p b·∫°n. T√¥i c√≥ th·ªÉ gi√∫p g√¨ cho b·∫°n h√¥m nay? B·∫°n c√≥ mu·ªën:\n‚Ä¢ Thu√™ xe ƒëi·ªán\n‚Ä¢ Xem b·∫£ng gi√°\n‚Ä¢ T√¨m ƒë·ªãa ƒëi·ªÉm nh·∫≠n xe\n‚Ä¢ H·ªó tr·ª£ kh√°c',
        newContext: { ...newContext, topic: 'greeting' }
      };
    }
    
    // Context-aware responses based on previous conversation
    if (currentContext.topic === 'rental' || analysis.intent === 'booking') {
      if (lowerMessage.includes('xe m√°y') || lowerMessage.includes('scooter')) {
        return {
          message: 'Xe m√°y ƒëi·ªán l√† l·ª±a ch·ªçn tuy·ªát v·ªùi! Ch√∫ng t√¥i c√≥:\n\nüõµ **VinFast Klara S** - 60km/s·∫°c - 60.000ƒë/ng√†y\nüõµ **Honda U-BE** - 50km/s·∫°c - 55.000ƒë/ng√†y\nüõµ **Pega Cap A** - 40km/s·∫°c - 45.000ƒë/ng√†y\n\nB·∫°n mu·ªën thu√™ t·ª´ ng√†y n√†o v√† trong bao l√¢u?',
          newContext: { ...newContext, topic: 'scooter_selection' }
        };
      } else if (lowerMessage.includes('√¥ t√¥') || lowerMessage.includes('car')) {
        return {
          message: '√î t√¥ ƒëi·ªán r·∫•t ti·ªán l·ª£i! Ch√∫ng t√¥i c√≥:\n\nüöó **VinFast VF5** - 4 ch·ªó - 900.000ƒë/ng√†y\nüöô **VinFast VF8** - 7 ch·ªó - 1.200.000ƒë/ng√†y\nüöó **Tesla Model 3** - Cao c·∫•p - 1.500.000ƒë/ng√†y\n\nB·∫°n c·∫ßn xe cho m·∫•y ng∆∞·ªùi v√† thu√™ bao l√¢u?',
          newContext: { ...newContext, topic: 'car_selection' }
        };
      } else if (currentContext.topic === 'scooter_selection' || currentContext.topic === 'car_selection') {
        // User might be providing rental duration or dates
        if (lowerMessage.includes('ng√†y') || lowerMessage.includes('tu·∫ßn') || lowerMessage.includes('th√°ng')) {
          return {
            message: 'Tuy·ªát v·ªùi! ƒê·ªÉ ho√†n t·∫•t ƒë·∫∑t xe, t√¥i c·∫ßn th√™m m·ªôt s·ªë th√¥ng tin:\n‚Ä¢ H·ªç t√™n v√† s·ªë ƒëi·ªán tho·∫°i\n‚Ä¢ Gi·∫•y ph√©p l√°i xe (b·∫£n photo)\n‚Ä¢ ƒê·ªãa ƒëi·ªÉm nh·∫≠n xe\n‚Ä¢ Th·ªùi gian c·ª• th·ªÉ\n\nB·∫°n c√≥ th·ªÉ cung c·∫•p th√¥ng tin n√†y kh√¥ng?',
            newContext: { ...newContext, topic: 'booking_details' }
          };
        }
      }
      return {
        message: 'T√¥i c√≥ th·ªÉ h·ªó tr·ª£ b·∫°n thu√™ xe ƒëi·ªán. B·∫°n mu·ªën thu√™:\n‚Ä¢ Xe m√°y ƒëi·ªán (ti·ªán l·ª£i, ti·∫øt ki·ªám)\n‚Ä¢ √î t√¥ ƒëi·ªán (gia ƒë√¨nh, tho·∫£i m√°i)\n‚Ä¢ Xe ƒë·∫°p ƒëi·ªán (th·ªÉ thao, th√¢n thi·ªán m√¥i tr∆∞·ªùng)',
        newContext
      };
    }
    
    if (currentContext.topic === 'pricing' || analysis.intent === 'pricing') {
      return {
        message: 'üí∞ **B·∫£ng gi√° thu√™ xe ƒëi·ªán:**\n\n**Xe m√°y ƒëi·ªán:**\n‚Ä¢ VinFast Klara S: 60.000ƒë/ng√†y\n‚Ä¢ Honda U-BE: 55.000ƒë/ng√†y\n‚Ä¢ Pega Cap A: 45.000ƒë/ng√†y\n\n**√î t√¥ ƒëi·ªán:**\n‚Ä¢ VinFast VF5: 900.000ƒë/ng√†y\n‚Ä¢ VinFast VF8: 1.200.000ƒë/ng√†y\n‚Ä¢ Tesla Model 3: 1.500.000ƒë/ng√†y\n\n**Xe ƒë·∫°p ƒëi·ªán:** 35.000ƒë/ng√†y\n\n*Gi·∫£m 10% cho thu√™ t·ª´ 7 ng√†y tr·ªü l√™n!*\n\nB·∫°n quan t√¢m lo·∫°i xe n√†o?',
        newContext
      };
    }
    
    if (currentContext.topic === 'location' || analysis.intent === 'location') {
      if (lowerMessage.includes('s√¢n bay') || lowerMessage.includes('airport')) {
        return {
          message: '‚úàÔ∏è **ƒêi·ªÉm nh·∫≠n xe S√¢n bay T√¢n S∆°n Nh·∫•t:**\n\nüìç ƒê·ªãa ch·ªâ: T·∫ßng 1, Nh√† ƒë·ªÉ xe B1\n‚è∞ Gi·ªù ho·∫°t ƒë·ªông: 24/7\nüìû Hotline: 0901-234-567\n\nüéØ ∆Øu ƒëi·ªÉm:\n‚Ä¢ G·∫ßn c·ª≠a ra qu·ªëc n·ªôi\n‚Ä¢ C√≥ ƒë·∫ßy ƒë·ªß lo·∫°i xe\n‚Ä¢ Nh√¢n vi√™n h·ªó tr·ª£ 24/7\n\nB·∫°n mu·ªën ƒë·∫∑t xe ngay?',
          newContext: { ...newContext, topic: 'airport_pickup' }
        };
      }
      return {
        message: 'üìç **C√°c ƒëi·ªÉm nh·∫≠n xe c·ªßa ch√∫ng t√¥i:**\n\nüè¢ **Qu·∫≠n 1:** 123 Nguy·ªÖn Hu·ªá (6:00-22:00)\nüè¢ **Qu·∫≠n 3:** 456 Nam K·ª≥ Kh·ªüi Nghƒ©a (6:00-22:00)\nüè¢ **Qu·∫≠n 7:** 789 Nguy·ªÖn Th·ªã Th·∫≠p (6:00-22:00)\n‚úàÔ∏è **S√¢n bay TSN:** T·∫ßng 1, B1 (24/7)\n\nB·∫°n mu·ªën nh·∫≠n xe ·ªü ƒë√¢u?',
        newContext
      };
    }
    
    if (currentContext.topic === 'battery' || analysis.intent === 'battery') {
      return {
        message: 'üîã **Th√¥ng tin v·ªÅ pin xe ƒëi·ªán:**\n\n**Xe m√°y ƒëi·ªán:**\n‚Ä¢ Qu√£ng ƒë∆∞·ªùng: 40-60km/l·∫ßn s·∫°c\n‚Ä¢ Th·ªùi gian s·∫°c: 4-6 ti·∫øng\n‚Ä¢ Pin lithium b·ªÅn b·ªâ\n\n**√î t√¥ ƒëi·ªán:**\n‚Ä¢ Qu√£ng ƒë∆∞·ªùng: 300-400km/l·∫ßn s·∫°c\n‚Ä¢ Th·ªùi gian s·∫°c: 30-45 ph√∫t (s·∫°c nhanh)\n‚Ä¢ H·ªá th·ªëng qu·∫£n l√Ω pin th√¥ng minh\n\n‚ö° **Tr·∫°m s·∫°c mi·ªÖn ph√≠** t·∫°i t·∫•t c·∫£ ƒëi·ªÉm nh·∫≠n xe!\n\nB·∫°n c√≥ lo l·∫Øng g√¨ v·ªÅ pin kh√¥ng?',
        newContext
      };
    }
    
    // Follow-up responses based on context
    if ((currentContext.conversationStep || 0) > 2) {
      if (currentContext.topic === 'booking_details') {
        return {
          message: 'C·∫£m ∆°n b·∫°n ƒë√£ quan t√¢m! ƒê·ªÉ ƒë·∫∑t xe nhanh ch√≥ng:\n\nüì± **C√°ch 1:** G·ªçi hotline 1900-1234\nüíª **C√°ch 2:** ƒê·∫∑t online t·∫°i website\nüí¨ **C√°ch 3:** Ti·∫øp t·ª•c chat ƒë·ªÉ t√¥i h·ªó tr·ª£\n\nB·∫°n mu·ªën t√¥i h∆∞·ªõng d·∫´n ƒë·∫∑t xe ngay b√¢y gi·ªù?',
          newContext
        };
      }
    }
    
    // Generic contextual responses
    const contextualResponses = [
      `D·ª±a tr√™n cu·ªôc tr√≤ chuy·ªán c·ªßa ch√∫ng ta v·ªÅ ${currentContext.topic || 'd·ªãch v·ª•'}, t√¥i hi·ªÉu b·∫°n ƒëang quan t√¢m. B·∫°n c√≥ th·ªÉ n√≥i r√µ h∆°n kh√¥ng?`,
      'T√¥i ƒë√£ ghi nh·∫≠n th√¥ng tin b·∫°n cung c·∫•p. ƒê·ªÉ h·ªó tr·ª£ t·ªët nh·∫•t, b·∫°n c√≥ c√¢u h·ªèi c·ª• th·ªÉ n√†o kh√¥ng?',
      'ƒê·ªÉ t√¥i c√≥ th·ªÉ h·ªó tr·ª£ ch√≠nh x√°c, b·∫°n c√≥ th·ªÉ cho bi·∫øt b·∫°n mu·ªën bi·∫øt th√™m v·ªÅ ph·∫ßn n√†o?'
    ];
    
    return {
      message: contextualResponses[Math.floor(Math.random() * contextualResponses.length)],
      newContext
    };
  };

  const handleChatSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    if (!chatInput.trim()) return;

    const userMessage: ChatMessage = {
      id: Date.now().toString(),
      type: 'user',
      message: chatInput,
      timestamp: new Date(),
    };

    setChatMessages(prev => [...prev, userMessage]);
    setIsTyping(true);

    // Generate contextual bot response with delay for natural feel
    setTimeout(() => {
      const { message, newContext } = generateBotResponse(chatInput, chatMessages, chatContext);
      
      const botResponse: ChatMessage = {
        id: (Date.now() + 1).toString(),
        type: 'bot',
        message,
        timestamp: new Date(),
        context: newContext.topic
      };
      
      setChatMessages(prev => [...prev, botResponse]);
      setChatContext(newContext);
      setIsTyping(false);
    }, 1500);

    setChatInput('');
  };

  const toggleChat = () => {
    setIsOpen(!isOpen);
    setIsMinimized(false);
  };

  const minimizeChat = () => {
    setIsMinimized(true);
  };

  const closeChat = () => {
    setIsOpen(false);
    setIsMinimized(false);
  };

  return (
    <>
      {/* Chat Button */}
      <AnimatePresence>
        {!isOpen && (
          <motion.div
            initial={{ scale: 0, opacity: 0 }}
            animate={{ scale: 1, opacity: 1 }}
            exit={{ scale: 0, opacity: 0 }}
            whileHover={{ scale: 1.1 }}
            whileTap={{ scale: 0.9 }}
            className="fixed bottom-6 right-6 z-50"
          >
            <Button
              onClick={toggleChat}
              className="h-14 w-14 rounded-full bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700 shadow-lg hover:shadow-xl transition-all duration-300"
              size="icon"
            >
              <MessageCircle className="h-6 w-6 text-white" />
            </Button>
            {/* Notification dot */}
            <div className="absolute -top-1 -right-1 h-4 w-4 bg-red-500 rounded-full flex items-center justify-center">
              <span className="text-xs text-white font-bold">1</span>
            </div>
          </motion.div>
        )}
      </AnimatePresence>

      {/* Chat Window */}
      <AnimatePresence>
        {isOpen && (
          <motion.div
            initial={{ opacity: 0, y: 100, scale: 0.8 }}
            animate={{ 
              opacity: 1, 
              y: 0, 
              scale: 1,
              height: isMinimized ? 60 : 400 
            }}
            exit={{ opacity: 0, y: 100, scale: 0.8 }}
            transition={{ duration: 0.3, ease: "easeOut" }}
            className="fixed bottom-6 right-6 z-50 w-80"
          >
            <Card className="shadow-2xl border-0 overflow-hidden">
              {/* Header */}
              <CardHeader className="bg-gradient-to-r from-blue-600 to-purple-600 text-white p-4">
                <div className="flex items-center justify-between">
                  <div className="flex items-center space-x-3">
                    <Avatar className="h-8 w-8">
                      <AvatarFallback className="bg-white text-blue-600">
                        <Bot className="h-4 w-4" />
                      </AvatarFallback>
                    </Avatar>
                    <div>
                      <CardTitle className="text-sm font-semibold">Tr·ª£ l√Ω ·∫£o</CardTitle>
                      <div className="flex items-center space-x-1">
                        <div className="h-2 w-2 bg-green-400 rounded-full"></div>
                        <span className="text-xs opacity-90">ƒêang online</span>
                      </div>
                    </div>
                  </div>
                  <div className="flex items-center space-x-1">
                    <Button
                      variant="ghost"
                      size="sm"
                      onClick={minimizeChat}
                      className="h-8 w-8 p-0 text-white hover:bg-white/20"
                    >
                      <Minimize2 className="h-4 w-4" />
                    </Button>
                    <Button
                      variant="ghost"
                      size="sm"
                      onClick={closeChat}
                      className="h-8 w-8 p-0 text-white hover:bg-white/20"
                    >
                      <X className="h-4 w-4" />
                    </Button>
                  </div>
                </div>
              </CardHeader>

              {/* Chat Content */}
              <AnimatePresence>
                {!isMinimized && (
                  <motion.div
                    initial={{ height: 0, opacity: 0 }}
                    animate={{ height: "auto", opacity: 1 }}
                    exit={{ height: 0, opacity: 0 }}
                    transition={{ duration: 0.2 }}
                  >
                    <CardContent className="p-0">
                      {/* Messages */}
                      <div className="h-64 overflow-y-auto p-4 space-y-4 bg-gray-50 dark:bg-gray-800">
                        {chatMessages.map((message) => (
                          <motion.div
                            key={message.id}
                            initial={{ opacity: 0, y: 10 }}
                            animate={{ opacity: 1, y: 0 }}
                            className={`flex ${message.type === 'user' ? 'justify-end' : 'justify-start'}`}
                          >
                            <div className={`flex items-start space-x-2 max-w-[80%] ${
                              message.type === 'user' ? 'flex-row-reverse space-x-reverse' : ''
                            }`}>
                              {message.type === 'bot' && (
                                <Avatar className="h-6 w-6 mt-1">
                                  <AvatarFallback className="bg-blue-100 text-blue-600 text-xs">
                                    <Bot className="h-3 w-3" />
                                  </AvatarFallback>
                                </Avatar>
                              )}
                              {message.type === 'user' && (
                                <Avatar className="h-6 w-6 mt-1">
                                  <AvatarFallback className="bg-gray-200 text-gray-600 text-xs">
                                    <User className="h-3 w-3" />
                                  </AvatarFallback>
                                </Avatar>
                              )}
                              <div className={`p-3 rounded-lg ${
                                message.type === 'user' 
                                  ? 'bg-blue-600 text-white' 
                                  : 'bg-white dark:bg-gray-700 border'
                              }`}>
                                <div className="text-sm whitespace-pre-line">{message.message}</div>
                                <p className={`text-xs mt-1 ${
                                  message.type === 'user' 
                                    ? 'text-blue-100' 
                                    : 'text-gray-500 dark:text-gray-400'
                                }`}>
                                  {message.timestamp.toLocaleTimeString('vi-VN', { 
                                    hour: '2-digit', 
                                    minute: '2-digit' 
                                  })}
                                </p>
                              </div>
                            </div>
                          </motion.div>
                        ))}
                        
                        {/* Typing Indicator */}
                        {isTyping && (
                          <motion.div
                            initial={{ opacity: 0, y: 10 }}
                            animate={{ opacity: 1, y: 0 }}
                            className="flex justify-start"
                          >
                            <div className="flex items-start space-x-2 max-w-[80%]">
                              <Avatar className="h-6 w-6 mt-1">
                                <AvatarFallback className="bg-blue-100 text-blue-600 text-xs">
                                  <Bot className="h-3 w-3" />
                                </AvatarFallback>
                              </Avatar>
                              <div className="bg-white dark:bg-gray-700 border p-3 rounded-lg">
                                <div className="flex space-x-1">
                                  <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce"></div>
                                  <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce" style={{ animationDelay: '0.1s' }}></div>
                                  <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce" style={{ animationDelay: '0.2s' }}></div>
                                </div>
                              </div>
                            </div>
                          </motion.div>
                        )}
                        <div ref={messagesEndRef} />
                      </div>

                      {/* Input */}
                      <div className="p-4 border-t bg-white dark:bg-gray-900">
                        <form onSubmit={handleChatSubmit} className="flex space-x-2">
                          <Input
                            value={chatInput}
                            onChange={(e) => setChatInput(e.target.value)}
                            placeholder="Nh·∫≠p tin nh·∫Øn..."
                            className="flex-1 text-sm"
                          />
                          <Button 
                            type="submit" 
                            size="sm" 
                            disabled={!chatInput.trim()}
                            className="bg-blue-600 hover:bg-blue-700"
                          >
                            <Send className="h-4 w-4" />
                          </Button>
                        </form>
                      </div>
                    </CardContent>
                  </motion.div>
                )}
              </AnimatePresence>
            </Card>
          </motion.div>
        )}
      </AnimatePresence>
    </>
  );
};

export default FloatingChat;
